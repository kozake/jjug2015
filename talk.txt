1)
では、セッションを始めたいと思います
みなさん、こんにちは！

本日は、『Android開発で変わるSIerのJava技術事情について』
というタイトルのとおり、
Android開発を通して僕が得た経験の中で、
主にJava関連技術の部分についてお話をさせて頂こうと思います。

2)
本日のセッションのハッシュタグはこちらです。
Twitterなどでつぶやく際は、こちらのハッシュタグでお願いします。

3)
会話の文字の内容はこちらに掲載しています。
会話が聞き取りづらい方は、こちらを参照してください！

4)
まずは自己紹介から

5)
「こざけ」といいます。大阪から来ました。
チャームポイントはビールです。
関西ではほげ駆動という、謎のコミュニティに
よく顔を出しています。
あと、関ジャバイベントによく参加しますので、
そこでの遭遇率が高いです。
DCRという会社で受託開発をしています。
いわゆるSIerですね。
そこでシステムアーキテクトとして頑張っています。
得意技術はJavaで、これまでシステム間連携機能
とかを主に担当してきました。
スレッド周りのプログラミングとか通信まわりの
プログラミングが好きです。

JDK1.2の頃から仕事でJavaをやっていました。
まだまだプログラムを書いていたい39歳です。
本日はよろしくお願いします！！

6)
では、いきなりここでいくつか質問をさせて
頂きたいと思います。

7)
受託開発を中心に仕事をされている方って
本日どれくらいいますか？
よければ挙手頂けますか？

8)
では、もうひとつ
Android開発を今まで仕事で経験された方って
どれくらいいますか？

9)
僕自身は去年までAndroid開発は未経験でした。
Activityってなんですか？って状態ですね。
本日のセッションは、そんな僕がAndroid開発
を通して得た経験を発表するということです。
技術的に濃い話はありませんし出来ません。
ま〜、今日も16時ということでみなさんお疲れだと思いますので、
軽い気持ちできいて頂ければと思います＾＾

10)
では、本日のアジェンダです。
まずは今回紹介するプロジェクトの事例紹介、
そして「ここが変わるよAndroid開発」というカテゴリで、
技術事例についてはお話させて頂こうと思います。


11)
ではまず、プロジェクトの背景から。

12)
今からちょうど4年前ですね。

13)
300人月を超える大規模ミッションクリティカルな基幹システム
の開発をするという話をうけました。
稼働率が99.99% で年間停止許容時間が1時間未満で
1回の停止時間も10分以内というシステムをJavaで再構築でして、
それにシステムアーキテクトとして参加することになりました。

14)
ミッションクリティカルかつ大規模という開発は初めての経験でして、
色々な苦労が伴いましたが、

15)
無事成功しまして、今はそのシステムも元気に稼働しています。
実際にこれ、凄い大成功でした。
リリース当日は僕、下着を３日分用意していったんですけど、
システム移行が前倒しで２時間予定より早く終わるという、
これまでにないくらいの成功ぶりでした。
その後もまー、ハード周りではちらほらあったんですが、
アプリケーション部分ではほぼ大きな問題なく、
現在も稼働しております。

16)
で、ちょうど1年前ですね

17)
次はAndroidタブレットを用いた基幹システムとの連携
という話がでまして、
去年から要件定義・設計・開発に入っています。
だいたい900人くらいの従業員がタブレットを使う想定でして、
規模は200人月くらいのプロジェクトです。
インフラあわせると20名くらいのチームで頑張っています。
今このプロジェクトは開発のちょうど過渡期に入ってまして、
進捗はま〜お察しください。
本日、この発表がなかったら、僕は職場でコードを書いていたと
思います。

18)
その当時はまだAndroid開発はまるでやったこともなかったのですが、
まあ、アレやろ、Javaで開発するんだろ？
Javaやったら今までやってきたからな！AppletもSwingもやったで！！
Javaだったらなんとでもなるわ〜

19)
とまー、こんな調子でチーム初のAndroidプロジェクトが
立ち上がりました。背景はだいたいこんな感じです！

20)
そもそもなんでAndoridタブレットなの？iPadじゃなかったの？
っという話があると思いますが、
Androidはお客さんにとってもSIerにとっても双方に
メリットがあります。

21)
お客さんからすれば出来るだけベンダロックした製品を使いたくない
という要望があるんですね。
実際に組み込みではメーカーがハードの保守や生産を打ち切る
というのはよくある話ですし、そういう背景からシステムを
エンハンスした経験もあります。
iPadはApple1社の動向に左右されやすいですが、
Android端末ならいろんな会社から販売されているという
安心感があります。
また、大量に端末を導入する場合、端末代もバカにならないです。
1万円の機種代の差が1000万になったりしますので

22)
SIerの視点でみると、Java技術者であれば技術者の調達がiOSの技術者
に比べるとわりと楽です。
請負という仕事の特性上、常にチームを抱えるのが難しい
ビジネスモデルですので、技術者の調達問題は大きいんですね。

最近では大型案件もちらほらあり、Java技術者すら市場にいない
状況ですので。
あと、Windows端末で開発できるメリットは大きいです。
iOSの開発は普通にやるとMacいりますからね。
Mac買うと次年度以降はその端末を使わなくても
減価償却にのってくるという恐ろしさがあります。
まあ、原価があがるという怖さですね。

AndroidはiOSに比べて開発が大変という話を聞きますが、
そのほとんどは機種互換やバージョン互換の話のように思います。
B２Bの場合、機種やバージョンはわりと固定しやすいので、
その部分は安心だと考えています。

23)
AndroidはiOSに比べて開発が大変という話を聞きますが、
そのほとんどは機種互換やバージョン互換の話のように思います。
B２Bの場合、機種やバージョンはわりと固定しやすいので、
その部分は安心だと考えています。
今回の開発でも、機種はもちろん固定していますので、
そこら辺は安心です。
ただ、バージョン固定は少しやっかいですが。。

24)
では、システム構成を簡単に

25)
このようなシステム構成になっています。
タブレットは作業員900人分で900台。
あとモバイルプリンタも900台です。
プリンタのイメージがモバイルプリンタに見えないですが、
いいイメージがなかったんですね＾＾
Androidはバージョン4.4.2を使用しています。
タブレットとサーバーはHTTP通信していまして、
JSONデータをやりとりします。
サーバー側のデータベースはOracleで、
データベースとは別に写真などのデータを蓄えるために、
NASも用意しました。
基幹システムと連携するバッチサーバーがいまして、
データの集配信を担当しています。
ざくっと簡単ですが、このような構成です。

26)
では、今回のセッションの本題に入りたいと思います。
ここが変わるよAndroid開発ということで、
今までのJava Web開発と違うな〜と感じたところを
紹介していきたいと思います！
まずは開発環境から

27)
Javaで開発環境といえばEclipseですよね。
Android開発に入る前に、いくつかのAndroid本を購読したり、
社内勉強会を開催したりしました。
だいたい、EclipseでPluginを使ったAndroid開発を
紹介している本が多くありました。ですので、
僕も「Eclipseなら任せとけ、Eclipseなら長年やってきた。
俺のEclipseショートカット力をみせつけてやる」
と意気込んでいたんですが

28)
はい、Android界隈の人の間ではもうAndroid Studioを
使う開発が主流になりつつあるみたいです。

29)
Android Studioが何かといいますと、
IndetlliJ IDEAをベースに開発されたAndroid開発用のIDEです
Google I/O 2013でEclipseのプラグインに変わるIDE
として発表されました
最新Verは1.1で今回の開発でもこれを使って開発を進めています。

1.1は大丈夫なの？もっと安定している
古いバージョンのほうがいいんじゃないの？
って話は内部でも出たのですが、これについては僕ともうひとりの
メンバーが押し切りました。
後述しますが、少々不安定でもまー大丈夫かなと思っていましたので。

30)
では、Android開発を進めるにはAndrod Studioを
学ばないといけないの？
という話になると思います。
実際にAndorid StudioというかInteliJ IDEAは
癖のあるIDEですので。

31)
違いますよ〜
と いや、別に違う事はないんですけどねw
それはそれできちんと勉強したほうがいいと思いますが。

ちょと今の開発環境を紹介しますと

32)
このような開発環境になっています。
ビルドにGradle
SCMにGit、中央リポジトリにGitBucket
CIにJenkins
で社内リポジトリにartifactoryを使っています。
もちろん、IDEはAndroid Studioを使っています。

33)
で、Gradleなんですが、図から様々なところと
絡んでいるのが分かると思います。
Android Studioのプロジェクト設定元となったり、
Android StudioやCIサーバーからビルドやテストが実行されたり、
gradleで依存性のあるjarをArtifactoryから取得したり、
ivyプラグインを使ってArtifactoryにpublishしたりしています。

34)
そもそもGradleって何？という方の為に簡単に説明です。
GradleはAnt やMavenのようなビルドツールです。
GroovyベースのDSLでビルド設定を記述できて、柔軟で強力です。
僕のイメージですが、
Antは柔軟ですが定型記述が多くて煩わしい、
Mavenは規約に沿った形で使うと強力ですが柔軟性
にかけるイメージがあります。

実際に、３年前の大規模システムを開発するときは、
MavenではなくAntとIvyというモジュール依存性管理のツールを
組み合わせて開発しました。
今回Gradleを採用したいのは、Gradleを色々勉強したり試したりしてみて、
Gradleがこれらのいいとこ取りをしている、
よいビルドツールだと感じたからです。
Android開発を行う上では、Androidプラグインが提供されており、
これを利用してビルドやテストを行います。

35)
Android Studioから新しくプロジェクトを作成した場合、
Gradleのマルチプロジェクトが自動で生成されます。
また、Gradleのビルド設定を修正すると、Android Studioの
設定に反映されます。
逆方向はないんですね。このように、Android StudioとGradle
は密接な関係です。

Android Studioの操作方法で悩んだり、
あとAndroid Studio自体が若干まだ動作に不安なところがあって
おかしな挙動で悩むこともまれにあるのですが、
Gradleは安定していまして、Gradleのコマンドを叩けば、
Android Studioの不具合なのかそうでないのかの
切り分けが行いやすいんですね。

最後に、新しい技術を学ぶ上でやっぱり日本語の情報がある
と嬉しいです。
Gradleは「Gradle徹底入門」という良質な日本語書籍がありまして、
そこにAndroid PluginやAndroid Studioなどのことも
詳しくかかれております。
めちゃくちゃ助かっています。

こないだですね、Java Day Tokyoの楽天さんのセッションの話
を来いたいのですが、
Gradleはちょっと難しいかな？って話をされていました。
確かに僕もそれは若干感じておりまして、
Antに比べたらやや難しいな〜と。
ただ、だいたい難しいことしないのであれば、
この書籍に目を通しておけば解決しますので、
なんとかなるという印象をもっています。
ビルドにスクリプト書けますので、
条件分岐のあるビルド処理とかを書こうとした場合は、
Antより圧倒的に使いやすいです。

36)
はい、ということで、Android開発で役立つGradleを学びましょう！
もちろん、Android開発以外のサーバ開発においても使えますし、役立ちます。
今回のプロジェクトにおいても、サーバ側もビルドツールはGradleを使っていまして、
IDEはIntelliJ IDEAを使ってます。
このように、開発する際はある程度使う技術を統一するってのは大切ですし、
できれば昔のシステムのビルドもGradleに変更できればな〜と思います。

37)

38)
GradleではGroovyが使えます。GroovyにはSimpleTemplateEndine
というライブラリがありまして、めちゃくちゃ便利です。
大規模システムの場合、いかに定型処理をなくすかは
開発効率面で重要なのですが、
テーブル定義やコード定義からこのライブラリをつかって
DDLやJavaソースを自動生成しています。
自動生成と聞くと眉をひそめる方もおられると思いますが、
自動生成したソースを手で修正しないという大前提のもとで、
僕は自動生成容認派です。
SimpleTemplateEngineの良いところは、
習得コストが簡単に使えるところなんですね。


39)
40)
41)
42)

43)
Groovy自体がJavaのように書けば動くので、
Java技術者がスクリプト書くのに習得コストが低くて適した
言語だと考えています。
Gradleを導入すると自然とGroovy とふれあう機会も増えます。
Groovyを使う事で簡単なその場しのぎの仕事が効率化しますので、
これを機会にGroovy使った事ないJavaエンジニアの方も
勉強してみては如何かと思います。

44)
ではライブラリの話です。
新規開発の場合、どのライブラリを採用するかとか考えている時が一番
ワクワクしますよね！あのライブラリを使ってやろうか、
こうやったらもっといい感じになるんじゃね？とか色々と考えますね。

45)
ついこないだ「APIデザインの極意」という書籍を読んだのですが、
その中に
『今日のシステムは巨大なビルディングブロックの上に構成されています。』
という記述がありまして、その言葉に凄く感銘をうけました。
よし、今回のAndroid開発においても、
役立つライブラリを導入しまくって効率化しまくるぜ！！
ってまー、考えてました！

46)
はい、ライブラリの容量に気をつけましょう〜
ライブラリがんがん入れようとしたら、Androidチームのリーダーに怒られちゃいましたw
調子にのって導入しまくると痛い目をみます。

47)
サーバみたいに簡単にライブラリ導入するとアプリの容量が大きくなります。
アプリの容量が大きくなると、クラスロードに時間がかかって起動が
遅くなってしまったり、
アップデートに時間がかかったりというデメリットがあります。
サーバの場合は、頻繁に起動と終了を繰り返したりしないので
気にしなくていいところなのですが、
タブレット端末では気にしないとダメです。
また、タブレットはいうても非力です。
汎用的なライブラリは処理量も大きくなりまやすいので、
動作が重くなる可能性もあります。
ライブラリを使わなくても簡単に実装できる範囲であれば、
そうしたほうがいい場合があります。

48)
じゃ、どんなライブラリ使っているの？って話になると思いますが、
今回の開発で導入したライブラリを簡単に紹介します。
定型的な記述を楽にしてくれるAndroidAnnotations
SQLiteのORMのActive Android。これについては後のデータベース
のところで話します。
あと、JSONパーサーのJacksonを導入しました。

49)
この中で、AndroidAnnotationsについて簡単に紹介したいと思います。

50)
AndroidAnnotationsはAndorid開発をスピードアップさせるOSSです。
Annotationを利用することでAndroidアプリの定型的な記述を省略でき、
メンテナンス性もあがります。

51)
例えば、このようなAndroidでよくあるActivityのコードを例に出しまして、

52)
ボタンのpushイベントを受け取る為のリスナー登録処理であるとか、

53)
ユーザ入力を受けおるために、TextViewを取得する処理などは

54)
AndroidAnnotationsを使うとこのようにシンプルな記述ですみます！
@ViewByIdアノーテーションでコンポーネントとバインドしたり
@Clickアノーテーションでクリックイベントを取得したり出来ます。

55)
Annotation Processerはコンパイル時にソースを自動生成しまして、
自動生成されたソースをみる事ができますので、
動作などでなにか分からないことがあったらソースを追うことが出来るので、
そこら辺も安心です。

56)
はい、ということで
「世の中には魅力的なライブラリがたくさんあります。
ただ、ライブラリの容量には気をつけましょう〜！」

57)
またまた余談なんですが、

58)
タブレット側とサーバー側を両方開発していると、
双方で使う共通のライブラリを作りたくなるもんですが、
その場合は共通ライブラリのJDKバージョンに気をつけましょう〜！

僕もですね、ついつい共通側のソースにラムダかいて、
「うん、良いコードだ」って思ってたらCI側でコンパイルエラーになって
泣く泣く書き直すってことをこないだ経験しました。

59)
では、データベースの話です！

60)
Androidは標準でSQLiteという組み込みDBがありますね。
なんだ、DBあるじゃん、僕、MyBatisが得意で、
3年前の大規模システムの際もMyBatis Generator という
自動生成ツールのPlugin つくって色々効率化していたんですね。
今回も俺のMyBatis力が火をふくぜ〜って考えていたんですが

61)
はい、SQLiteOpenHelperを使いましょう〜

62)
AndroidにはSQLiteデータベースを操作する為に用意された
ヘルパークラスがあります。
JDBC接続も出来るんですが、普通はこれを利用します。
組み込みDBの場合、DBの新規作成やバージョンUPも
自動で出来るように考えないとダメなんですが、
このような仕組みも提供してくれているんですね。

63)
じゃあ、SQLite Open Helperを使って開発してるの？
って話なんですが

64)
いやいや、SQLite Open Helperが提供する機能
だけで開発するのは
JDBCだけで開発するのと二アリーなんですね。
適切なORMを使うのが開発効率的にも大事です。

65)
じゃあ、どのORM使うの？なんか標準的なものがあるの？
って話がありますが、
これは僕らも迷いました。
っで、結局いくつかのAndroid開発での有名どころのORM
を絞って検証したのがこちらの表になります。

66)
はい、継承の結果、ライブラリの所でも話に出ましたが、
Avtive Androidを採用しました。
実際にコードを書いてもらって使用感とかも確認して決めたのですが、
Active Androidが一番しっくりくるなーと
あと、クックパッドさんがこれを使っているみたいなんですね。
やっぱり先攻事例があると安心します。これも大きな決め手になりました。

67)
で、Active AndroidってどんあORMなのって話ですが、
名前のとおりActiveRecord風のORMです。
CRUDの基本的な機能だけでなく、スキーマのMigration機能
が用意されているのも嬉しかったです。

68)
具体的には、左のようなコードから自動的に右のようなテーブルが
自動で生成されます。

69)
ActiveAndroidはIDというサロゲートキーが自動で生成されるんですが、

70)
ナチャラルキーを付与したい場合は、
別途uniquGroupなどの属性で自動で付与することもできます。

71)
CRUDについては、上のような記述で書く事が出来ます。
だいたいコードみればどのように動くか分かると思います。
このように直感的にコードを記述できるので、習得コストは低いと思います。

72)
まあ、そういうことでActive Android最高ですか〜？
ってことについては

73)
やっぱり色々困りました。
完璧なツールなんてのはそうそうないもんですねw

74)
困った事その①として

75)
基幹システムの場合、マスタやトランザクションテーブル含めて
そのままタブレットに持っていきたいって思うんですね。
基本タブレットにあわせて定義を変えるとかすると大変なんで

で、困るのがテーブルのJOINです。
Active AndroidはID以外のキーでのJOINは未サポートなんです。
またIDでのJOINはn:1問題になるようなSQLを発行しますので、
性能が必要な場面ではあまり推奨できないです。

76)
っで、結局どうしたかというと、
Active Androidのソースを読んで、そのアーキテクチャを参考に
記述したSQLを副問い合わせの表として扱える、
「ActiveAndroidQuery」というライブラリを自作しました。
ActiveAndroidって5000ステップくらいの比較的小さなライブラリですので、
こんな風に用意に拡張もできます。

77)
こちらが実際に自作したActiveAndroidQueryのソース例です。
@QueryアノーテーションにJOINしたSQLを書いて、
これを副問い合わせ表として扱うことが出来ます！
もちろん、副問い合わせ表に条件を指定してSQLを発行することも可能です。
このライブラリは僕が作ったんですけど、
Androidチームの方からは割と好評です。

78)
では、困った事②

79)
Active Androidの管理するDBファイルはアプリで１つです。
SQLiteはDBファイル単位で排他しまして、行やテーブル単位での排他は出来ないんですね。
いや、やろうと思うと出来るんですが、
場合によってはテーブルが壊れる可能性もあるのでちょっと危険です。

80)
また、1つのスレッド内でトランザクションの入れ子ができないです。
全体的なTransaction1はRollbackさせるけど、
一部のTransaction2の部分だけCommitするなどは出来ないんですね。

81)
Oracleなどの多機能なDBと同じと考えると血をみます。
場合によりDBファイルを分ける設計も重要ですが、
その際はActive Androidの管理するDBファイルは1つなのに注意してください。

82)
はい、最後に困った事③

83)
全然Activeじゃないです。
いや、なにがあったんだと、俺のプルリク取り込んでよ〜と

まあ、いつか復活してくれることを期待していますw

84)
はい、またまた余談ですが
余談好きなんですよね

85)
DBファイルはアプリケーション保存域に作成されます。
セキュリティ的にDBファイルを中身を直接参照できないように
パーミッションきられていまして、
rootとかとらないとDBファイルの中身をみれないんですが、
かなり面倒です。
そもそもお客さんに開発用で借りているタブレット
のrootとっていいんかいって話もありますし

86)
っで、このようなライブラリを使っています。

87)
TelnetSqliteは、Android内部でtelnetサーバーたてて、
DBとやりとり出来るツールです。
Debug時にこれを起動すると、telnet経由でSQLを発行できます。

88)
っで、RdbAssistantというツールがありまして、
このツールと組み合わせるとDBの中身をグラフィカルに
参照できて便利です。
このツール、同じ人が作っているのでこういうことが可能なんでしょうね
大変役立っています！

89)
はい、では帳票の話です。

90)
現場でモバイルプリンタで帳票だすんですが、
PDFで帳票作成することにしました。
PDFならJasper Reportにワンチャンあるで！！
って思っていましたが

91)
AndroidってAWTパッケージないんですね
マジかって思いました

92)
Androidライブラリのawtパッケージはjava.awt.fontのみです
iTextなどはawtパッケージを使用しているんで
Andoridでは使えない子になるんですね

93)
まあ、結局どうしてん って話なんですが

94)
ほとんどの帳票はサーバー側で作成する事になりました。
まあ、なんのひねりもなく申し訳ありませんが。

95)
AndroidでPDF作成は鬼門です。
有償のツールはあるみたいですが、無償は皆無です。
サーバーでの帳票作成は帳票を出力する現場がオンライン環境って
のが前提になりますので、
事前にお客さんとの合意形成がひつようになります。
モバイルプリンタについてるSDKを使って直接印刷する
コードを書く事もできますが、
１つの帳票作成するにも工数がかなりかかってしまうので注意が必要です

96)
はい、では写真です。

97)
写真を管理する時、どのように管理しようかって話があります。
例えば、帳票データと写真を紐づけて管理するなどが必要になるんですが、
一意なファイル名とかが欲しくなるんですね。
そこでファイル名はUUIDで管理することにしました。
まあ、これで上手い具合に管理できるやろって考えていたんですが。

98)
JavaライブラリのUUIDはタイプ4だったんですね。

99)
UUIDは分散システム上で一意な識別子を作成できるものでして、
一般的にはソフトウェアを一意に識別するための
識別子としても用いられるのですが、
今回はこれを写真のファイル名に用いろうと考えました。

100)
UUIDにはいくつかの算出アルゴリズムがありまして
タイプ1の場合は時刻とMACアドレスがUUID内に含まれるので
一位であることが保証されるんですが
タイプ4の場合、完全ランダムですので、
一意性は乱数生成の性能に依存します。ちょっと心もとないですよね。

101)
写真ファイル名にはタイプ1を使いたいのですが、

102)
java.util.UUID.randomUUID()はこちらです。
タイプ1は用意されておりません。

103)
タイプ1のUUIDを算出するライブラリも探せばあるんですが、
異なるアプリで同じ値を取得できるのは、
端末を識別できる情報をとれるってことで
セキュリティ的に推奨されない流れになっています。
iOSではデバイスの識別子であるUDIDやMACアドレスは
取得出来ないようになってます。
Androidはまー、とれるんですが、このような流れがあるからどうかな〜と

104)
まあ、結局ですね

105)
次の組み合わせでファイル名を作成することにしました。
まあ、一意性って話以外にも管理的な話もあって、
ファイル名に色々情報を持たせたかったというのもあります。
なんといっても、１日だけで10000件くらいの写真が
増えていることを想定していますので

106)
はい、まとめです
写真のファイル名に限らず、システム全体でユニークな値が欲しくなることは多いです。
タブレットではデータの生成される箇所が分散されますので、
ユニーク値をどのように生成するかをシステム特性にあわせて検討する必要があります。

107)
Web通信です

108)
Androidタブレットと基幹システムの連携なので、当然通信が発生します。
まあ、通信はHTTPベースがでほぼ決まりですので、
ApacheのHttpClientライブラリを導入しようかな〜って考えていました。

109)
はい、AndroidにはHttpClient が用意されているんですね！


110)
Androidフレームワークで用意されているHttp Client実装として次のものがあります。
HTTP通信の為の基本的なAPIを備えているHttpURLConnectionと、
高機能なセットをもったDefaultHttpClientです。

111)
ところが、Android Developer’s Blogにおいてですね。
DefaultHttpClientとそれのデフォルト設定を提供するAndroidHttpClientは
互換性を破らずに改善することが難しいとの理由で現在推奨されていないんですね。

112)
というわけで、2.2以前はコネクションプールを汚染するという不具合が
HttpURLConnectionにはあったですが、
Android2.3以降はHttpURLConnectionの仕様が推奨されています。
実際にディベロッパリファレンスについても
HttpURLConnectionがベストだと書いています。
HttpURLConnectionはAPIがシンプルでサイズも小さくAndroidに適している、
バッテリーにもやさしいとのことです。

113)
114)
開発環境にAndroid Studio使いましょう〜！
そしてAndroid開発に便利なGradleを使いましょう〜！って話をしました

115)
ライブラリに入れすぎ注意という話をしました。
あと、AndroidAnnotationsは便利なので使いましょう〜！


116)
SQLiteとORMとしてActiveAndroidの簡単な紹介をしました。
DBまわりは一癖あるので気をつけましょう！


117)
一般的なPDFライブラリに必要なAWTパッケージがないという話をしました
AndroidではPDF作成はまだ鬼門ですので気をつけましょう〜
いつかいいライブラリが出るのを期待しています。

118)
写真を管理する際にファイル名にUUIDを使った話をしました。
写真のファイル名に限らず、中央管理のない状態でユニーク値が欲しいという話は
Android開発をする上ではわりとよく出てくると思うので考慮しておきましょう〜


119)
AndroidにはHttpURLConnectionとDefaultHttpClientの
2つのHttpクライアント実装がある話をしました。
バッテリーにやさしいHttpURLConnectionを使いましょう〜！


120)
121)
122)
実際にAndroid開発以外でもいっぱい困っていっぱい勉強しています。
例えば、サーバサイドはJAX-RSを使っていますが、
JAX-RSもそうですがHTTPの基礎知識やより良いWebAPIの設計方法
について勉強したりしています。
また、認証は今までのHTTPセッションによる認証というわけにはいかないので、
OAuth2認証を実装しました。
OLTUというライブラリを使ったので苦労は少なかったですが、
ちょっとJAX-RSからHTTPServletRequestを使うところ
ではまりどころとかありました。
その他、GPSですね。今回お話できなかったのですが、
GPS情報をタブレットからサーバーに定期的に送って、
従業員の場所をGoogle Map APIで
表示などのシステムも開発しています。
Google Map APIやWebのフロント側の知識も必要になります。

123)
124)
125)
126)
127)
